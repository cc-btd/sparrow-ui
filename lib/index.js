var named = (function (exports) {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    const runIFELSE = sets => {
      let _arr = new Array();

      for (let [is, fn = () => true] of sets) {
        if (is) {
          if (fn()) {
            _arr.push(true);

            break;
          }

          _arr.push(false);
        }
      }

      if (!_arr.includes(false)) {
        return true;
      }
    };

    let _globalThis;

    const getGlobalThis = () => {
      return _globalThis || (_globalThis = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {});
    };
    const sto = (fn, time = 16) => {
      let t = setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {
        yield fn();
        clearTimeout(t);
      }), time);
      return t;
    };
    const isObject = tar => Object.prototype.toString.call(tar) === '[object Object]';
    const has = (target, key) => Reflect.has(target, key);

    !function (c) {
      var l,
          t,
          a,
          o,
          e,
          s = '<svg><symbol id="sp-icon-loading1" viewBox="0 0 1024 1024"><path d="M512 0a512 512 0 0 1 512 512h-64a448 448 0 0 0-448-448V0z"  ></path></symbol><symbol id="sp-icon-close" viewBox="0 0 1024 1024"><path d="M515.73413788 577.99240005L282.72393522 811.07049612c-17.312821 16.29441978-44.47018728 15.88705927-61.30775437-0.95050784-16.8375671-16.8375671-17.24492759-43.92703995-1.01840124-61.30775435l233.01020266-233.01020265L220.39777961 282.72393522c-16.90546051-17.24492759-16.76967368-44.87754776 0.33946708-61.98668853s44.74176095-17.24492759 61.98668853-0.33946708l233.01020265 233.01020266L748.81223393 220.39777961c17.24492759-16.90546051 44.87754776-16.76967368 61.98668853 0.33946708s17.24492759 44.74176095 0.33946706 61.98668853L578.06029347 515.73413788l233.01020265 233.01020263c16.90546051 17.24492759 16.76967368 44.87754776-0.3394671 61.98668851-17.10914076 17.10914076-44.74176095 17.24492759-61.98668851 0.3394671L515.73413788 577.99240005z"  ></path></symbol><symbol id="sp-icon-error" viewBox="0 0 1024 1024"><path d="M512 64.303538c-247.25636 0-447.696462 200.440102-447.696462 447.696462 0 247.254314 200.440102 447.696462 447.696462 447.696462s447.696462-200.440102 447.696462-447.696462S759.25636 64.303538 512 64.303538zM710.491727 665.266709c12.491499 12.491499 12.489452 32.729425-0.002047 45.220924-6.246261 6.246261-14.429641 9.370415-22.611997 9.370415s-16.363689-3.121084-22.60995-9.366322L512 557.222971 358.730221 710.491727c-6.246261 6.246261-14.429641 9.366322-22.611997 9.366322s-16.365736-3.125177-22.611997-9.370415c-12.491499-12.491499-12.491499-32.729425 0-45.220924l153.268756-153.266709L313.50725 358.730221c-12.491499-12.491499-12.489452-32.729425 0.002047-45.220924s32.729425-12.495592 45.220924-0.004093l153.268756 153.268756 153.268756-153.268756c12.491499-12.491499 32.729425-12.487406 45.220924 0.004093s12.493545 32.729425 0.002047 45.220924L557.225017 512 710.491727 665.266709z"  ></path></symbol><symbol id="sp-icon-warning" viewBox="0 0 1024 1024"><path d="M512 64.303538c-247.255337 0-447.696462 200.441125-447.696462 447.696462s200.441125 447.696462 447.696462 447.696462 447.696462-200.441125 447.696462-447.696462S759.255337 64.303538 512 64.303538zM512 804.948005c-35.32146 0-63.956637-28.635177-63.956637-63.956637 0-35.323507 28.635177-63.956637 63.956637-63.956637s63.956637 28.633131 63.956637 63.956637C575.956637 776.312828 547.32146 804.948005 512 804.948005zM575.956637 512c0 35.32146-28.635177 63.956637-63.956637 63.956637s-63.956637-28.635177-63.956637-63.956637l0-223.848231c0-35.323507 28.635177-63.956637 63.956637-63.956637s63.956637 28.633131 63.956637 63.956637L575.956637 512z"  ></path></symbol><symbol id="sp-icon-info" viewBox="0 0 1024 1024"><path d="M512 0a512 512 0 1 0 0 1024A512 512 0 0 0 512 0z m0 896A384 384 0 0 1 512 128a384 384 0 0 1 0 768z m29.696-194.88c-11.136 10.112-24.96 17.344-31.488 15.36-6.08-1.792-9.536-7.424-8.384-13.056l89.344-248c7.424-31.488-12.736-60.16-55.424-63.872-44.8 0-110.976 40.128-151.232 90.944 0 6.08-1.344 21.12 0.128 30.208l53.632-54.208c11.008-10.176 23.808-17.344 30.336-15.424 6.592 1.92 10.112 8.384 8 14.464l-88.704 246.848c-10.176 28.864 9.152 57.152 56.192 63.616 68.928 0 109.888-39.168 150.208-89.984 0-6.08 2.368-22.08 0.96-31.104l-53.568 54.208zM575.744 192c-35.584 0-64.448 25.728-64.448 63.808 0 37.952 28.864 63.744 64.448 63.744 35.648 0 64.448-25.728 64.448-63.744 0-38.08-28.8-63.808-64.448-63.808z"  ></path></symbol><symbol id="sp-icon-success" viewBox="0 0 1024 1024"><path d="M512 32C246.4 32 32 249.6 32 512s217.6 480 480 480 480-217.6 480-480S774.4 32 512 32z m268.8 380.8L496 697.6c-25.6 25.6-60.8 25.6-83.2 0L243.2 528c-25.6-25.6-25.6-60.8 0-83.2s60.8-25.6 83.2 0l128 128 240-240c25.6-25.6 60.8-25.6 83.2 0 25.6 19.2 25.6 54.4 3.2 80z"  ></path></symbol><symbol id="sp-icon-loading" viewBox="0 0 1024 1024"><path d="M249.836 210.77c5.558-3.827 10.73-7.527 15.812-10.695 4.967-3.314 9.807-6.121 14.208-8.785 2.18-1.362 4.374-2.515 6.425-3.673l5.873-3.281c0.945-0.551 1.789-0.953 2.625-1.377l2.425-1.226 4.381-2.233 1.954-1.004 2.219-1.093 3.918-1.924 7.184-3.527c2.883-1.44 5.996-3.272 8.694-5.22 26.969-19.458 33.057-57.094 13.599-84.063-19.458-26.968-57.094-33.057-84.063-13.599l-6.49 4.682-3.54 2.554-2.071 1.499-2.62 1.947-5.824 4.351a7267.87 7267.87 0 0 0-3.193 2.399c-1.091 0.824-2.25 1.676-3.282 2.533a33346.62 33346.62 0 0 1-6.735 5.441c-2.343 1.915-4.833 3.859-7.308 6.046-4.991 4.313-10.423 8.905-15.952 14.121-5.645 5.071-11.353 10.792-17.394 16.739-5.886 6.125-12.079 12.515-18.185 19.505-12.303 13.875-24.827 29.53-36.839 46.835a494.61 494.61 0 0 0-33.896 56.497 491.342 491.342 0 0 0-27.329 64.159c-1.02 2.77-1.888 5.605-2.789 8.428l-2.688 8.477c-1.692 5.691-3.266 11.429-4.857 17.152l-2.135 8.669c-0.683 2.896-1.479 5.756-2.051 8.682l-1.84 8.729-0.914 4.358-0.785 4.387a479.254 479.254 0 0 0-7.583 69.967c-0.302 5.759-0.239 11.514-0.279 17.214l-0.017 4.267c-0.001 1.42 0.069 2.841 0.101 4.257l0.25 8.464 0.127 4.204 0.264 4.188 0.531 8.317 0.278 4.451 0.399 3.933 0.792 7.821c0.14 1.313 0.244 2.561 0.412 3.918l0.527 4.098 1.056 8.115c0.185 1.337 0.33 2.695 0.549 4.002l0.648 3.91 1.289 7.744c1.825 10.246 3.911 20.188 6.263 29.766a463.195 463.195 0 0 0 16.342 52.81l2.255 5.904 1.108 2.899 1.186 2.836 4.611 10.976c3.247 7.033 6.19 13.723 9.353 19.831 6.048 12.328 12.043 22.661 17.007 31.096 5.121 8.359 9.212 14.84 12.197 19.141l4.472 6.638-3.293-7.292c-2.209-4.713-5.148-11.776-8.748-20.761-3.443-9.059-7.545-20.055-11.346-32.919-2.041-6.376-3.771-13.301-5.726-20.516l-2.612-11.204-0.667-2.878-0.583-2.935-1.183-5.957c-3.105-16.055-5.568-33.549-6.889-52.052-0.668-9.251-1.027-18.753-1.1-28.437l0.03-7.3 0.014-3.67c0.002-1.227 0.084-2.416 0.122-3.629l0.284-7.263 0.139-3.644c0.053-1.229 0.166-2.577 0.247-3.863a35704.717 35704.717 0 0 1 0.798-11.787l0.017-0.247c0.013 0.588 0.018 0.028 0.027 0.098l0.05-0.472 0.101-0.945 0.2-1.891 0.8-7.581 0.4-3.801 0.535-3.801 1.069-7.62c0.187-1.271 0.335-2.545 0.555-3.815l0.67-3.811c0.909-5.082 1.708-10.185 2.859-15.253a424.734 424.734 0 0 1 17.057-60.03l1.316-3.663 1.437-3.623 2.859-7.225c0.907-2.417 2.03-4.761 3.033-7.135l3.079-7.082c2.208-4.653 4.37-9.295 6.624-13.867l3.508-6.783c1.167-2.252 2.294-4.513 3.565-6.702a414.503 414.503 0 0 1 31.89-49.502 407.116 407.116 0 0 1 35.476-41.25 406.598 406.598 0 0 1 35.793-32.288c5.751-4.687 11.515-8.857 16.918-12.861zM1023.966 510.486l-0.001-0.005-0.875-7.954-1.051-9.554-0.687-6.125-1.153-8.152c-0.828-5.729-1.741-12.089-2.813-18.907l-4.259-20.887c-0.691-3.726-1.738-7.517-2.729-11.425l-3.102-12.024c-0.558-2.048-1.019-4.142-1.677-6.221l-1.958-6.314-4.07-13.021-1.049-3.333-1.211-3.324c-0.814-2.223-1.638-4.467-2.469-6.732-1.673-4.522-3.34-9.131-5.115-13.781l-5.938-13.981-3.046-7.123c-1.037-2.384-2.247-4.72-3.375-7.102l-6.997-14.388c-0.569-1.22-1.222-2.408-1.877-3.598l-1.958-3.583-3.95-7.211-3.995-7.265c-1.354-2.422-2.881-4.773-4.324-7.175l-8.875-14.427c-12.567-18.998-26.533-37.793-42.018-55.643-15.662-17.71-32.638-34.534-50.581-50.045a527.617 527.617 0 0 0-56.726-41.602c-19.622-12.201-39.702-22.647-59.484-31.64l-14.925-6.188c-2.47-0.995-4.881-2.072-7.356-2.979l-7.402-2.651-7.306-2.609-3.615-1.289c-1.198-0.434-2.394-0.863-3.618-1.21l-14.37-4.353c-2.366-0.691-4.68-1.466-7.035-2.069l-7.02-1.754-13.669-3.402c-4.524-0.941-8.985-1.788-13.341-2.655l-6.47-1.271-3.184-0.621-3.186-0.465-12.373-1.797-5.96-0.862c-1.957-0.298-3.928-0.403-5.85-0.61l-11.239-1.057c-3.638-0.329-7.151-0.735-10.598-0.81l-19.18-0.823-16.258 0.11-6.935 0.057c-2.177 0.091-4.219 0.237-6.115 0.34l-9.619 0.566-7.982 0.472 7.959 0.875 9.529 1.05c1.872 0.215 3.884 0.411 6.023 0.683l6.797 1.101 15.801 2.578 18.393 3.951c3.283 0.628 6.614 1.603 10.051 2.514l10.571 2.838c1.801 0.509 3.644 0.92 5.469 1.526l5.542 1.793 11.432 3.697 2.927 0.946 2.914 1.104 5.902 2.242c3.965 1.517 8.007 3.017 12.084 4.613l12.243 5.366 6.241 2.733c2.088 0.929 4.128 2.029 6.212 3.044l12.59 6.277c1.068 0.506 2.106 1.094 3.145 1.685l3.131 1.761 6.302 3.542 6.353 3.568c2.118 1.209 4.165 2.586 6.263 3.878l12.601 7.922c16.565 11.247 32.949 23.681 48.48 37.44a473.639 473.639 0 0 1 43.435 44.87 467.917 467.917 0 0 1 35.892 50.115c10.476 17.304 19.389 34.971 27.062 52.322 1.761 4.404 3.506 8.772 5.234 13.098 0.843 2.166 1.771 4.273 2.532 6.444l2.224 6.49 2.201 6.396 1.093 3.162c0.368 1.047 0.734 2.092 1.019 3.166l3.633 12.572c0.578 2.068 1.242 4.086 1.738 6.146l1.441 6.137 2.829 11.931 2.152 11.645 1.045 5.64 0.514 2.772 0.362 2.779 1.423 10.784 0.697 5.188c0.245 1.704 0.3 3.423 0.458 5.098l0.794 9.786c0.249 3.167 0.584 6.22 0.595 9.223l0.516 16.686-0.346 13.152-0.109 5.579-0.343 6.014-0.567 9.595-0.472 7.988c-0.169 3.219-0.107 6.829 0.256 10.138 3.638 33.056 33.383 56.904 66.438 53.267 33.056-3.637 56.905-33.382 53.268-66.438zM885.176 762.451l-4.868 5.897c-1.711 2.052-3.44 4.238-5.4 6.399-3.858 4.365-7.946 9.128-12.608 13.957-4.517 4.944-9.632 9.919-14.922 15.205-5.467 5.131-11.147 10.547-17.374 15.864-12.349 10.726-26.262 21.624-41.613 32.046a434.435 434.435 0 0 1-50.026 29.303 431.157 431.157 0 0 1-56.59 23.39c-2.436 0.874-4.935 1.6-7.419 2.361l-7.455 2.279c-5.006 1.425-10.053 2.742-15.078 4.091-2.536 0.593-5.075 1.187-7.617 1.78-2.545 0.566-5.051 1.25-7.622 1.714l-7.663 1.523-3.822 0.763-3.851 0.64a419.278 419.278 0 0 1-61.304 5.938c-5.039 0.219-10.081 0.088-15.068 0.072l-3.733-0.022c-1.238-0.012-2.392-0.1-3.587-0.145l-7.067-0.313-3.505-0.146-3.997-0.27-7.961-0.537-1.981-0.133-0.989-0.067-0.494-0.033c0.221-0.008-0.844-0.005 0.433-0.022l-0.226-0.025-3.593-0.396-7.127-0.78a406.62 406.62 0 0 1-53.494-10.013 402.48 402.48 0 0 1-45.808-14.792l-5.111-2.022-2.511-0.99-2.452-1.066-9.494-4.124c-6.074-2.917-11.861-5.522-17.131-8.352-10.648-5.379-19.552-10.718-26.826-15.11l-1.338-0.807a1085.391 1085.391 0 0 0-3.457-2.276l-4.116-2.687c-0.638-0.414-1.252-0.813-1.842-1.194l-2.021-1.354-3.621-2.439-6.637-4.472c-2.685-1.782-5.825-3.567-8.857-4.938-30.307-13.689-65.973-0.218-79.662 30.089-13.689 30.308-0.218 65.974 30.089 79.663l7.293 3.294 3.979 1.797 2.369 1.063 2.994 1.302c2.073 0.896 4.3 1.857 6.676 2.885l3.672 1.574 1.917 0.819 1.9 0.745c10.22 4.014 22.646 8.772 37.189 13.242 7.215 2.375 15.042 4.443 23.216 6.727l12.687 3.1 3.261 0.787 3.325 0.701 6.75 1.415c18.195 3.715 38.044 6.719 59.054 8.439a494.284 494.284 0 0 0 65.863 0.997l8.535-0.519 4.285-0.266 0.268-0.017c1.44-0.02 0.541-0.02 0.927-0.03l0.492-0.051 0.986-0.1 1.977-0.201 7.938-0.807 3.991-0.406 4.502-0.554 9.015-1.133c1.492-0.2 3.034-0.365 4.486-0.598l4.344-0.709c5.795-0.965 11.61-1.832 17.399-3.066a485.178 485.178 0 0 0 68.692-18.701l4.2-1.463 4.157-1.588 8.292-3.176c2.771-1.016 5.468-2.251 8.194-3.37l8.134-3.434c5.351-2.451 10.685-4.869 15.941-7.39l7.805-3.918c2.591-1.307 5.188-2.576 7.712-3.991a474.344 474.344 0 0 0 57.071-35.83 467.174 467.174 0 0 0 47.72-40.068 466.596 466.596 0 0 0 37.51-40.586c5.455-6.542 10.335-13.082 14.998-19.24 4.483-6.313 8.789-12.218 12.512-18 3.868-5.667 7.179-11.177 10.297-16.204 1.589-2.492 2.957-4.989 4.318-7.332 1.349-2.348 2.635-4.586 3.854-6.711 4.686-8.611 8.271-15.384 10.509-20.116l3.527-7.185-4.682 6.489c-2.985 4.266-7.65 10.33-13.635 17.935z"  ></path></symbol><symbol id="sp-icon-backward" viewBox="0 0 1024 1024"><path d="M913.408 38.4a25.6 25.6 0 0 1 18.112 43.712L501.824 512l429.696 429.888a25.6 25.6 0 0 1-36.224 36.224l-447.808-448a25.6 25.6 0 0 1 0-36.224l447.808-448A25.472 25.472 0 0 1 913.408 38.4z"  ></path><path d="M558.464 38.4a25.6 25.6 0 0 1 18.112 43.712L146.688 512l429.888 429.888a25.6 25.6 0 0 1-36.224 36.224l-448-448a25.6 25.6 0 0 1 0-36.224l448-448A25.6 25.6 0 0 1 558.464 38.4z"  ></path></symbol><symbol id="sp-icon-qianjin" viewBox="0 0 1024 1024"><path d="M829.53 262.19c72.92 80.33 120.86 187.59 112.91 295.79-7.97 108.38-71.82 208.19-158.64 273.54-114.04 85.83-269.77 114.97-405.94 72.14-136.15-42.85-248.22-157.94-283.41-296.27-15.1-59.34-15.22-120.41-2.79-178.63 29.27-137.09 128.11-258.41 264.85-304.19 54.7-18.32 113.33-25.03 170.75-19.35 115.56 11.44 224.21 70.97 302.27 156.97zM809.8 504.22c0.87-7.64-1.01-15.08-4.23-22.13 0 0 0-0.01-0.01-0.02-3.74-18.89-16.11-35.35-29.63-49.33-28.87-29.89-64.27-52.5-100.81-72.46a534.49 534.49 0 0 0-10.4-5.92c-17.27-9.56-34.99-18.22-52.99-26.28a0.717 0.717 0 0 0-0.22-0.1 1286.998 1286.998 0 0 0-103.25-43.55c-5.76-2.14-12.65-4.11-17.66-0.54-2.96 2.12-4.41 5.66-5.55 9.16-4.99 9.43-7.62 24.25-9.45 35.76-0.01 0.03-0.01 0.06-0.02 0.09-6.35 29.2-9.64 59.07-9.76 88.94-1.28 15.55-4.92 30.62-17.18 39.26-5.13 3.61-11.1 5.5-17.33 6.5h-0.03c-0.59 0-1.18-0.01-1.76-0.01l-56.18-0.36c-19.46-1.16-38.91-2.34-58.32-0.85-1.57 0.12-3.16 0.26-4.75 0.44-15.48-0.1-31.18-0.15-46.06 4.1-29.7 8.47-43.42 34.39-46.4 62.57 0.01 0.01 0.01 0.02 0 0.03-3.52 17.93-1.7 37.97 6.57 53.81 4.42 11.6 11.51 22.29 22.45 27.72 8.98 4.44 19.37 4.78 29.39 5.01 22.35 0.53 44.69 1.07 67.04 1.6 27.16 0.76 54.31 1.52 81.47 2.27 10.41 0.28 21.51 0.79 30.03 6.79 11.6 8.17 14.76 23.7 17.01 37.71 2.22 13.83 4.44 27.65 6.67 41.47 0.83 7.32 1.67 14.64 2.51 21.96 0.57 4.97 1.63 10.69 6.02 13.08 3.53 1.91 7.86 0.87 11.71-0.25 105.51-30.76 202.09-92.16 273.67-175.55 6.88-8.02 13.66-16.65 19.36-25.78 1.41-2.26 2.75-4.56 4.02-6.87 6.55-8.49 12.86-17.69 14.07-28.27z" fill="#BBE0E9" ></path><path d="M805.58 482.08c3.22 7.05 5.1 14.49 4.23 22.13-1.21 10.59-7.53 19.79-14.06 28.27 7.71-14.18 12.38-29.42 10.62-45.33-0.19-1.7-0.46-3.39-0.79-5.07z"  ></path><path d="M806.37 487.15c1.76 15.91-2.91 31.15-10.62 45.33-0.26 0.34-0.52 0.67-0.78 1.02-1.35 1.74-2.71 3.49-4.09 5.21-74.58 94-177.79 164.99-292.29 200.93-4.03 1.26-8.8 2.38-12.18-0.17-2.75-2.08-3.5-5.82-4.05-9.23-1.31-8.12-2.62-16.24-3.91-24.35-1.46-12.7-2.92-25.4-4.37-38.11-1.88-16.33-5.24-35.04-19.5-43.22-7.58-4.35-16.71-4.67-25.44-4.88-28.63-0.69-57.26-1.36-85.88-2.05-13.74-0.38-27.49-0.77-41.22-1.15-21.86-0.61-45.32-1.75-62.71-15.04-6.33-4.84-11.28-11.08-14.95-18.14a88.769 88.769 0 0 1-2.69-8.23c-3.92-14.22-5.49-30.24-3.88-45.58 0.01-0.01 0.01-0.02 0-0.03 1.41-7.18 3.67-14.04 6.73-20.14 15.16-30.27 53.74-43.19 85.74-46.53h0.32l62.75 0.42c14.56 0.86 29.14 1.72 43.71 1.45 4.72-0.09 9.55-0.33 14.23-1.08h0.03c9.05 0 18.68-0.6 25.44-6.47 9.09-7.88 9.19-21.66 9.07-33.7-0.02-1.87-0.02-3.73-0.01-5.6 0.5-6.21 0.62-12.5 0.77-18.48 0.44-18.49 3.06-39.25 6.96-58.27 0.62-3.01 1.26-7.3 2.03-12.2 0.01-0.03 0.01-0.06 0.02-0.09 2.54-11.65 5.57-23.19 9.08-34.59l0.36-1.17c1.88-3.54 4.09-6.31 6.71-7.87 4.23-2.51 9.6-0.84 14.21 0.87 35.46 13.21 71.02 26.48 105.54 41.93 0.07 0.02 0.15 0.05 0.22 0.1 16.97 8.02 33.78 16.44 50.39 25.22 4.35 2.29 8.69 4.62 13.01 6.99 46.48 27.05 89.27 61.38 120.42 105.1 3.73 5.22 7.34 10.82 10.02 16.69 0.01 0.01 0.01 0.02 0.01 0.02 0.34 1.7 0.61 3.39 0.8 5.09z"  ></path><path d="M775.94 432.73c13.52 13.98 25.89 30.44 29.63 49.33-2.68-5.88-6.29-11.47-10.02-16.69-31.15-43.71-73.94-78.04-120.42-105.1 36.54 19.97 71.94 42.58 100.81 72.46zM794.97 533.5c0.26-0.34 0.52-0.67 0.78-1.02-1.27 2.31-2.61 4.61-4.02 6.87-5.7 9.12-12.48 17.75-19.36 25.78-71.59 83.39-168.16 144.79-273.67 175.55-3.85 1.12-8.18 2.16-11.71 0.25-4.39-2.39-5.45-8.11-6.02-13.08-0.84-7.32-1.68-14.64-2.51-21.96 1.3 8.12 2.61 16.24 3.91 24.35 0.55 3.4 1.3 7.15 4.05 9.23 3.37 2.54 8.15 1.42 12.18 0.17 114.49-35.94 217.71-106.93 292.29-200.93 1.37-1.72 2.73-3.47 4.08-5.21zM664.73 354.36c3.49 1.93 6.96 3.9 10.4 5.92a958.42 958.42 0 0 0-13.01-6.99c-16.61-8.77-33.42-17.19-50.39-25.22 18 8.07 35.72 16.73 53 26.29zM508.27 284.42c35.03 13.01 69.48 27.54 103.25 43.55-34.53-15.45-70.08-28.71-105.54-41.93-4.61-1.71-9.99-3.38-14.21-0.87-2.62 1.56-4.83 4.33-6.71 7.87 1.14-3.5 2.6-7.04 5.55-9.16 5-3.57 11.9-1.6 17.66 0.54zM485.06 293.04l-0.36 1.17c-3.51 11.4-6.54 22.94-9.08 34.59 1.82-11.51 4.44-26.34 9.44-35.76zM478.45 705.9c-2.23-13.82-4.45-27.64-6.67-41.47-2.25-14.01-5.42-29.54-17.01-37.71-8.52-6-19.62-6.51-30.03-6.79-27.16-0.76-54.31-1.52-81.47-2.27 28.62 0.69 57.25 1.36 85.88 2.05 8.73 0.21 17.87 0.53 25.44 4.88 14.25 8.18 17.62 26.89 19.5 43.22 1.45 12.68 2.9 25.39 4.36 38.09zM475.59 328.89c-0.78 4.9-1.41 9.19-2.03 12.2-3.89 19.02-6.52 39.78-6.96 58.27-0.15 5.98-0.27 12.27-0.77 18.48 0.11-29.88 3.41-59.75 9.76-88.95zM465.84 423.43c0.11 12.03 0.02 25.82-9.07 33.7-6.77 5.87-16.39 6.47-25.44 6.47 6.23-1 12.2-2.89 17.33-6.5 12.26-8.64 15.9-23.71 17.18-39.26-0.02 1.87-0.02 3.72 0 5.59zM429.53 463.59c0.58 0 1.17 0.01 1.76 0.01-4.68 0.75-9.51 0.99-14.23 1.08-14.57 0.27-29.15-0.59-43.71-1.45l56.18 0.36zM373.35 463.22l-62.75-0.42h-0.32c1.6-0.18 3.19-0.31 4.75-0.44 19.41-1.47 38.85-0.3 58.32 0.86zM343.26 617.65c-22.35-0.53-44.69-1.07-67.04-1.6-10.02-0.24-20.41-0.57-29.39-5.01-10.94-5.43-18.03-16.12-22.45-27.72 3.66 7.06 8.62 13.3 14.95 18.14 17.39 13.29 40.85 14.43 62.71 15.04 13.73 0.38 27.48 0.76 41.22 1.15zM264.21 466.91c14.88-4.25 30.58-4.2 46.06-4.1-31.99 3.33-70.58 16.26-85.74 46.53-3.05 6.1-5.32 12.96-6.73 20.14 2.99-28.18 16.71-54.1 46.41-62.57zM221.69 575.09c0.76 2.76 1.65 5.52 2.69 8.23-8.27-15.84-10.09-35.89-6.57-53.81-1.61 15.34-0.04 31.35 3.88 45.58z"  ></path></symbol><symbol id="sp-icon-loading2" viewBox="0 0 1024 1024"><path d="M381.838313 867.335265c12.074748 12.074748 18.419107 27.526332 18.419107 45.945438s-6.037374 33.973019-18.419107 46.559408c-12.074748 12.58639-27.321675 18.726092-45.433796 18.726092s-33.154392-6.242031-45.433796-18.726092c-12.074748-12.58639-18.419107-27.935645-18.419107-46.559408 0-18.419107 6.037374-33.768362 18.419107-45.945438 12.074748-12.074748 27.321675-18.521435 45.433796-19.340062C354.516638 848.609174 369.45658 854.953533 381.838313 867.335265z"  ></path><path d="M497.981013 890.666134c-16.065554 0-29.470571 5.62806-40.317378 16.679524-10.846807 11.051464-16.270211 24.763466-16.270211 41.340662 0 16.270211 5.423404 29.879884 16.270211 40.726691 10.846807 10.846807 24.354152 16.270211 40.726691 16.270211s29.879884-5.423404 40.726691-16.270211 16.270211-24.354152 16.270211-40.726691-5.423404-29.982212-16.270211-41.340662C528.474868 896.294194 514.660538 890.666134 497.981013 890.666134z"  ></path><path d="M190.279604 733.182772c-20.874988 0.61397-38.168482 7.879285-51.778155 21.386629-13.609673 13.507345-20.465674 30.596183-20.465674 51.061857s6.958329 37.554512 20.465674 51.061857 30.596183 20.465674 51.061857 20.465674 37.554512-6.958329 51.061857-20.465674c13.507345-13.507345 20.465674-30.596183 20.465674-51.061857s-6.958329-37.554512-20.465674-51.061857C227.117818 741.062057 210.540622 733.796742 190.279604 733.182772z"  ></path><path d="M225.787549 273.216748c26.503048-0.61397 48.605976-10.02818 66.308784-27.730988 17.702808-17.702808 26.707705-40.010393 26.707705-66.820426s-9.004897-49.015289-26.707705-66.820426c-17.702808-17.702808-39.805736-26.503048-66.308784-26.503048s-48.605976 9.004897-66.308784 26.707705-26.707705 40.010393-26.707705 66.820426 9.004897 49.015289 26.707705 66.820426C177.181573 263.495553 199.284501 272.50045 225.787549 273.216748z"  ></path><path d="M89.076846 486.059758c24.354152-0.61397 44.615169-9.209553 61.192365-25.684421 16.270211-16.270211 24.558809-36.735885 24.558809-61.192365 0-24.354152-8.083941-44.615169-24.558809-61.192365-16.270211-16.270211-36.940542-24.558809-61.49935-24.558809s-45.22914 8.083941-61.49935 24.558809c-16.474868 16.679524-24.558809 36.940542-24.558809 61.397022 0 24.354152 8.083941 44.615169 24.558809 61.192365C43.438393 476.850205 64.108724 485.34346 89.076846 486.059758z"  ></path><path d="M170.530229 627.886879c-0.61397-22.921555-8.595583-41.852303-23.637854-56.894574s-33.768362-22.512241-56.280604-22.512241-41.340662 7.469971-56.280604 22.512241-22.512241 33.768362-22.512241 56.280604 7.469971 41.340662 22.512241 56.280604 33.768362 22.512241 56.280604 22.512241 41.340662-7.469971 56.280604-22.512241C161.934646 668.715899 169.916259 650.092136 170.530229 627.886879z"  ></path><path d="M964.905366 519.316478c-3.78615-4.195463-9.004897-6.242031-15.246927-6.242031s-11.460777 2.046567-15.656241 6.242031c-4.195463 4.195463-6.242031 9.41421-6.242031 15.656241s2.046567 11.460777 6.242031 15.656241 9.41421 6.242031 15.656241 6.242031c6.242031 0 11.256121-2.046567 15.246927-6.242031 3.78615-4.195463 5.832717-9.41421 5.832717-15.656241S968.589188 523.61427 964.905366 519.316478z"  ></path><path d="M927.760168 619.495953c-8.288598 0-15.246927 2.660538-20.874988 8.288598s-8.288598 12.58639-8.288598 20.874988 2.660538 15.246927 8.288598 20.874988 12.58639 8.288598 20.874988 8.288598 15.246927-2.660538 20.465674-8.288598 7.879285-12.58639 7.879285-20.874988-2.660538-15.246927-7.879285-20.874988C942.904767 622.258819 936.048766 619.495953 927.760168 619.495953z"  ></path><path d="M780.611972 811.463975c-12.58639 0.61397-22.716898 5.01409-30.903168 13.098031-7.879285 7.879285-12.074748 18.419107-12.074748 30.903168 0 12.58639 3.990806 22.921555 12.074748 31.312481 7.879285 8.288598 18.419107 12.58639 30.903168 12.58639s22.921555-4.195463 31.312481-12.58639c8.288598-8.288598 12.58639-18.726092 12.58639-31.312481s-4.195463-22.716898-12.58639-30.903168C803.533527 816.375737 793.198361 812.077945 780.611972 811.463975z"  ></path><path d="M655.464375 872.963326c-13.916658 0-25.684421 4.809433-35.507944 14.632957-9.823524 9.823524-14.632957 21.693614-14.632957 36.019586 0 14.223643 4.809433 26.298391 14.632957 36.019586 9.823524 9.823524 21.693614 14.632957 36.019586 14.632957 14.223643 0 26.093734-4.809433 35.507944-14.632957 9.41421-9.823524 14.223643-21.693614 14.223643-36.019586 0-14.223643-4.809433-26.298391-14.223643-36.019586C682.274408 877.772759 670.097332 872.963326 655.464375 872.963326z"  ></path><path d="M871.377236 722.745278c-9.823524 0.61397-18.21445 4.297792-24.968122 11.051464-6.958329 6.753672-10.437494 15.246927-10.437494 25.684421s3.581493 19.135405 10.437494 26.093734c6.958329 6.958329 15.451584 10.437494 25.684421 10.437494 10.02818 0 18.521435-3.581493 25.684421-10.437494 6.958329-6.958329 10.437494-15.656241 10.437494-26.093734s-3.581493-18.930748-10.437494-25.684421C890.61497 727.145398 881.81473 723.461577 871.377236 722.745278z"  ></path></symbol><symbol id="sp-icon-Code" viewBox="0 0 1024 1024"><path d="M853.32992 102.4H170.67008C133.13024 102.4 102.4 133.13024 102.4 170.67008v682.65984C102.4 890.86976 133.13024 921.6 170.67008 921.6h682.65984C890.86976 921.6 921.6 890.86976 921.6 853.32992V170.67008C921.6 133.13024 890.86976 102.4 853.32992 102.4zM389.60128 600.2688l-48.27136 48.26112L204.8 512l136.57088-136.52992 48.26112 48.26112L301.33248 512l88.2688 88.2688zM465.02912 819.2l-65.92512-17.67424L558.97088 204.8l65.92512 17.67424L465.02912 819.2z m217.6-170.67008L634.368 600.2688 722.66752 512l-88.2688-88.2688 48.27136-48.26112L819.2 512 682.62912 648.52992z"  ></path></symbol><symbol id="sp-icon-copy" viewBox="0 0 1024 1024"><path d="M832 64H295.992889a8.021333 8.021333 0 0 0-7.992889 7.992889V128c0 4.408889 3.612444 7.992889 7.992889 7.992889h496.014222V824.035556c0 4.380444 3.584 7.992889 7.992889 7.992888h56.007111a8.021333 8.021333 0 0 0 7.992889-7.992888V96c0-17.692444-14.307556-32-32-32z m-128 128h-512c-17.692444 0-32 14.307556-32 32v530.688c0 8.533333 3.413333 16.611556 9.386667 22.613333l173.312 173.283556c2.190222 2.218667 4.693333 4.010667 7.395555 5.518222v1.905778h4.209778c3.498667 1.28 7.196444 1.991111 11.008 1.991111H704c17.692444 0 32-14.307556 32-32V224c0-17.692444-14.307556-32-32-32zM382.008889 896h-0.199111l-149.816889-149.788444v-0.199112h150.016V896z"  ></path></symbol><symbol id="sp-icon-yunhang" viewBox="0 0 1024 1024"><path d="M511.999787 1023.997867a508.627426 508.627426 0 0 1-362.025309-149.972771A508.712759 508.712759 0 0 1 0.001707 511.999787a508.627426 508.627426 0 0 1 149.972771-362.025309A508.627426 508.627426 0 0 1 511.999787 0.001707h0.597331a508.243427 508.243427 0 0 1 361.64131 149.802105 508.755426 508.755426 0 0 1 110.932918 166.186043A509.267424 509.267424 0 0 1 1023.997867 511.999787a508.712759 508.712759 0 0 1-149.972771 362.067975A508.670092 508.670092 0 0 1 511.999787 1023.997867zM435.797406 298.667253A55.466459 55.466459 0 0 0 384.000267 356.992368v309.972171A55.466459 55.466459 0 0 0 435.797406 725.33232a49.151816 49.151816 0 0 0 25.941236-7.509305l238.463106-155.47675A61.055771 61.055771 0 0 0 725.33232 511.999787a61.098438 61.098438 0 0 0-25.173239-50.303812l-238.463106-155.47675A48.98115 48.98115 0 0 0 435.797406 298.667253z"  ></path></symbol><symbol id="sp-icon-success2" viewBox="0 0 1024 1024"><path d="M512.9 511.1m-447.4 0a447.4 447.4 0 1 0 894.8 0 447.4 447.4 0 1 0-894.8 0Z" fill="#0EC469" ></path><path d="M257.8 493.6s62.9 146.8 160.8 146.8c94.4 0 381.1-333.7 381.1-333.7S521.1 761.6 427.9 761.6c-77.5 0-133.4-110.7-170.1-268z" fill="#FFFFFF" ></path></symbol><symbol id="sp-icon-closew" viewBox="0 0 1024 1024"><path d="M507.168 473.232L716.48 263.936a16 16 0 0 1 22.624 0l11.312 11.312a16 16 0 0 1 0 22.624L541.12 507.168 750.4 716.48a16 16 0 0 1 0 22.624l-11.312 11.312a16 16 0 0 1-22.624 0L507.168 541.12 297.872 750.4a16 16 0 0 1-22.624 0l-11.312-11.312a16 16 0 0 1 0-22.624l209.296-209.312-209.296-209.296a16 16 0 0 1 0-22.624l11.312-11.312a16 16 0 0 1 22.624 0l209.296 209.296z"  ></path></symbol></svg>',
          i = (i = document.getElementsByTagName("script"))[i.length - 1].getAttribute("data-injectcss"),
          n = function (c, l) {
        l.parentNode.insertBefore(c, l);
      };

      if (i && !c.__iconfont__svg__cssinject__) {
        c.__iconfont__svg__cssinject__ = !0;

        try {
          document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
        } catch (c) {
          console && console.log(c);
        }
      }

      function d() {
        e || (e = !0, a());
      }

      function h() {
        try {
          o.documentElement.doScroll("left");
        } catch (c) {
          return void setTimeout(h, 50);
        }

        d();
      }

      l = function () {
        var c, l;
        (l = document.createElement("div")).innerHTML = s, s = null, (c = l.getElementsByTagName("svg")[0]) && (c.setAttribute("aria-hidden", "true"), c.style.position = "absolute", c.style.width = 0, c.style.height = 0, c.style.overflow = "hidden", l = c, (c = document.body).firstChild ? n(l, c.firstChild) : c.appendChild(l));
      }, document.addEventListener ? ~["complete", "loaded", "interactive"].indexOf(document.readyState) ? setTimeout(l, 0) : (t = function () {
        document.removeEventListener("DOMContentLoaded", t, !1), l();
      }, document.addEventListener("DOMContentLoaded", t, !1)) : document.attachEvent && (a = l, o = c.document, e = !1, h(), o.onreadystatechange = function () {
        "complete" == o.readyState && (o.onreadystatechange = null, d());
      });
    }(window);

    const tuple = (...args) => args;

    const ButtonTypes = tuple('default', 'primary', 'dashed', 'text', 'link', 'danger');
    const ButtonSizes = tuple('middle', 'small', 'mini');
    const ButtonShapes = tuple('circle', 'default', 'round');
    const ButtonHTMLTypes = tuple('submit', 'button', 'reset');

    const buttonProps = () => ({
      type: ButtonTypes,
      size: ButtonSizes,
      shape: ButtonShapes,
      htmltype: ButtonHTMLTypes,
      disabled: Boolean,
      loading: Boolean || {
        delay: Number
      },
      icon: String
    });

    const $el = (el, target = document) => target.querySelectorAll(el);
    const createEl = (tag, type = 'createElement') => document[type](tag);
    const setStyle = (target, obj) => {
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(target['style'], key) && obj[key] != "") {
          // console.log('设置了::::', key, obj[key]);
          target['style'][key] = obj[key];
        }
      }
    };
    const getProps = target => {
      let attributes = target.attributes;

      let _o = new Array(attributes.length).fill(null).reduce((obj, _, index) => {
        let prop = attributes.item(index);
        obj[prop['nodeName']] = prop['value'];
        return obj;
      }, {});

      return _o;
    };
    const defineEl = (props, Element) => {
      var _a; // let _corel: HTMLElement | { [key: string]: any } | any = null


      let is = runIFELSE(new Set([[props.tag.indexOf('-') == -1, () => {
        // 这里后续会替换成 用我们本组件内的提示
        alert('请检查 tag 参数！');
      }], [customElements.get(props.tag), () => {
        alert('已经存在了这个标签，bro');
        return false;
      }]]));
      if (!is) return; //props?.observedAttributes

      let getAttribute = (target, observedAttributes) => {
        if (observedAttributes) {
          observedAttributes.forEach(attr => {
            Object.defineProperty(target, 'attr-' + attr, {
              enumerable: false,
              configurable: false,

              get() {
                // if (_corel) {
                return target.getAttribute(attr); // }
                // return 'empty!'
              },

              set(val) {
                // console.log(val, attr)
                target.setAttribute(attr, val); // target[attr] = val
              }

            });
          });
        }
      };

      let wishClass = name => {
        var _a;

        return {
          [name]: (_a = class extends HTMLElement {
            constructor() {
              super();
              props.shadow ? this.attachShadow({
                mode: props.shadow
              }) : '';
              new Proxy(this, {}); // _corel = this

              getAttribute(this, props === null || props === void 0 ? void 0 : props.observedAttributes);
            }

            connectedCallback() {
              var _a, _b;

              props.connectedCallback.bind(this)() || (() => {});

              (_b = (_a = this).onload) === null || _b === void 0 ? void 0 : _b.call(_a);
            }

            disconnectedCallback() {
              var _a;

              ((_a = props.disconnectedCallback) === null || _a === void 0 ? void 0 : _a.bind(this)()) || (() => {});
            }

            attributeChangedCallback(name, oldValue, newValue) {
              var _a;

              (_a = props.attributeChangedCallback) === null || _a === void 0 ? void 0 : _a.bind(this)(name, oldValue, newValue);
            }

          }, _a.target = _a, _a)
        }[name];
      };

      let HTMl = wishClass(props.tag);
      Reflect.has(props, 'getConstructor') && ((_a = props.getConstructor) === null || _a === void 0 ? void 0 : _a.bind(undefined)(HTMl));
      HTMl.observedAttributes = (props === null || props === void 0 ? void 0 : props.observedAttributes) || [];
      getAttribute(HTMl.target, props === null || props === void 0 ? void 0 : props.observedAttributes);
      window.customElements.define(props.tag, Element || HTMl);
      return HTMl;
    };

    const listener = (target, event, func) => {
      target.addEventListener(event, func);
    };

    const typePropsObj = buttonProps();

    const changeProps = (elconstr, props) => {
      let includes = ['shape', 'size', 'type']; // , 'disabled'

      for (let key in props) {
        runIFELSE(new Set([[includes.includes(key), () => {
          let base = elconstr.baseClassName;
          let classes = {
            type: (elconstr['attr-type'] || 'default') !== 'default' ? ' sp-button--' + elconstr['attr-type'] : '',
            size: (elconstr['attr-size'] || 'middle') !== 'middle' ? ' sp-button-size--' + elconstr['attr-size'] : '',
            shape: (elconstr['attr-shape'] || 'default') !== 'default' ? ' sp-button-shape--' + elconstr['attr-shape'] : ''
          };

          for (let k in classes) {
            base += classes[k];
          }

          elconstr.className = base;
        }], [key == 'loading', () => {
          if (!props[key] || props[key] == 'false') {
            if (elconstr.loadinEl) {
              elconstr.loadinEl.classList.remove('sp-icon', 'sp-icon-loading');
              elconstr.classList.remove('is-loading');
              elconstr.loadinEl = null;
            }
          } else {
            if (elconstr.loadinEl === null) {
              elconstr.loadinEl = createEl('span');
              elconstr.classList.add('is-loading');
              elconstr.loadinEl.classList.add('sp-icon', 'sp-icon-loading');
              elconstr.insertBefore(elconstr.loadinEl, elconstr.firstChild);
            }
          }
        }], [key == 'disabled', () => {
          var _a;

          let type = props[key] == 'true' ? 'add' : 'remove';
          (_a = elconstr.classList) === null || _a === void 0 ? void 0 : _a[type]('is-disabled');
        }], [key == 'icon', () => {
          if (elconstr.loadinEl) return;
          let classname = 'sp-icon ' + props['icon'];

          if (elconstr.iconEl) {
            elconstr.iconEl.className = classname;
            return;
          }

          const el = createEl('i');
          el.className = classname;
          elconstr.iconEl = el;
          !elconstr.firstChild ? sto(set) : set();

          function set() {
            if (!elconstr.firstChild) {
              elconstr.append(el);
              return;
            }

            elconstr.insertBefore(el, elconstr.firstChild);
          }
        }]]));
      }
    };

    var button = // 为了避免冲突引发问题， 动态获取 标签属性要通过（attr-name）来获取 
    defineEl({
      tag: 'sp-button',
      observedAttributes: Object.keys(typePropsObj),

      connectedCallback() {
        let base = this.getAttribute('classname') || ''; // let self = this

        this.loadinEl = null;
        this.baseClassName = 'sp-button ' + base;
        this.className = 'sp-button ' + base; // type styletype = { // Partial
        //     [P in keyof CSSStyleDeclaration]?: CSSStyleDeclaration[P]
        // }
        // let _style: styletype = {
        //     transition: '.3s'
        // }
        // let handler: ProxyHandler<any> = {
        //     set(target: any, key: string, value: string) {
        //         let d = Reflect.set(target, key, value)
        //         setStyle(self, { [key]: value } as any)
        //         return d
        //     }
        // }
        // let target = new Proxy(_style, handler)
        // sto(() => setStyle(this, target))

        let attributesObj = Object.assign({}, getProps(this)); // for (let k1 in typePropsObj) {
        //     let k1v = attributesObj[k1]
        //     let k2v = typePropsObj[k1]
        //     runIFELSE(new Set([
        //         [(k2v instanceof Array), () => {
        //             if (!k2v.includes(k1v)) {
        //                 attributesObj[k1] = baseprops[k1]
        //                 self['attr-' + k1] = baseprops[k1]
        //             }
        //         }],
        //         [k1 == 'disabled', () => {
        //             attributesObj[k1] = k1v || 'false'
        //             self['attr-disabled'] = k1v || 'false'
        //         }]
        //     ]))
        // }

        changeProps(this, attributesObj);

        function adapderEmpty(childNodes) {
          let copty = [...childNodes];
          copty.shift();
          if (copty.length == 0) return true;else {
            let is = true;

            for (let i = 0; i < copty.length; i++) {
              if (copty[i].tag) {
                is = false;
                break;
              } else {
                copty[i].nodeValue.trim().length > 0 && (is = false);
                break;
              }
            }

            return is;
          }
        }

        if (this.loadinEl && adapderEmpty(this.childNodes)) {
          this.classList.add('empty-loading');
        }
      },

      attributeChangedCallback(name, _, newval) {
        changeProps(this, {
          [name]: newval
        });
      }

    });

    // export * from "./button"

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': button
    });

    let zIndex = 2000;

    const getIndex = () => {
      return zIndex;
    };

    const setIndex = (i = 1) => {
      zIndex += i;
      return zIndex;
    };

    const messageTypeslProps = () => ({
      visible: false,
      type: 'success'  ,
      message: '',
      duration: 3000,
      showclose: false,
      center: false,
      offset: 20,
      beforeClose: () => {},
      style: undefined,
      className: ''
    });

    class MessageBase {
      constructor() {
        this.setup = function () {
          let allEls = $el('sp-message');
          let propsOffset = parseInt(this.attrs.offset) || 20;
          let top = [...allEls].reduce((total, el) => {
            el['attr-visible'] == 'true' && (total += el.offsetHeight + propsOffset);
            return total;
          }, propsOffset);
          this['attr-visible'] = 'true';
          setStyle(this, {
            top: top + 'px',
            zIndex: getIndex() + ''
          });
        };

        this.initView = function () {
          this.className = 'sp-message sp-message-' + this.attrs.type;
          this.id = 'sp-message__' + getIndex();
          let iconEl = createEl('span'),
              contentEl = createEl('div'),
              closeEl = createEl('span'),
              t = null;
          contentEl.innerHTML = this.attrs.message;
          iconEl.className = 'sp-icon sp-icon-' + this.attrs.type;
          closeEl.className = 'sp-icon sp-icon-close';
          contentEl.className = 'sp-message-content';
          this.appendChild(iconEl);
          this.appendChild(contentEl);
          this.attrs.showclose == 'true' && this.appendChild(closeEl);

          if (+this.attrs.duration > 0) {
            t = sto(() => {
              this['attr-visible'] = false;
            }, +this.attrs.duration);
          }

          closeEl.onclick = () => {
            t > 0 && clearTimeout(t);
            this['attr-visible'] = false;
          };

          setStyle(contentEl, {
            justifyContent: this.attrs.center == 'true' ? 'center' : ''
          });
        };

        let self = this;
        defineEl({
          tag: 'sp-message',
          observedAttributes: Object.keys(messageTypeslProps()),

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, messageTypeslProps()), this.attrs);

            this.close = () => {
              this['attr-visible'] = false;
            };

            sto(() => {
              self.initView.call(this);
            });
            this.setup = self.setup.bind(this);
          },

          attributeChangedCallback(...args) {
            let [key, _, newval] = args;
            let elAlls = Array.from($el('sp-message'));
            runIFELSE.call(this, new Set([[key == 'visible', () => {
              var _a;

              let offsetHeight = this.offsetHeight;
              newval && setIndex();

              if (newval == 'false') {
                setStyle(this, {
                  opacity: '0',
                  zIndex: '0'
                });
                this.classList.add('sp-message-fade-leave');

                let _index = elAlls.findIndex(i => i.id == this.id);

                this.beforeClose && this.beforeClose();
                elAlls.forEach((element, i) => {
                  if (i >= _index) {
                    setStyle(element, {
                      top: parseInt(element.style.top, 10) - offsetHeight - 20 + 'px'
                    });
                  }
                });
                (_a = this.beforeDistroy) === null || _a === void 0 ? void 0 : _a.call(this);
                sto(() => this.remove(), 290);
              } else {
                this.classList.add('sp-message-fade-enter');
                sto(() => this.classList.add('sp-message-fade-enter-active'));
              }
            }]]));
          }

        });
      }

    }

    function Message(params = messageTypeslProps()) {
      let props = Object.assign(Object.assign({}, messageTypeslProps()), params);
      delete props.visible;
      let t = createEl('sp-message');
      runIFELSE(new Set([[has(props, 'beforeClose'), () => {
        t.beforeClose = props.beforeClose;
        delete props.beforeClose;
      }], [has(params, 'style'), () => {
        setStyle(t, params.style);
        delete props.style;
      }], [has(params, 'className'), () => {
        t.classList.add(params.className);
        delete params.className;
      }]]));

      for (let k in props) {
        t[`attr-${k}`] = props[k] + '';
      }

      document.body.appendChild(t);
      t.setup();
      let p = new Promise(r => {
        t.beforeDistroy = () => r(t);
      });
      return Object.assign(p, t);
    }

    ['info', 'success', 'error', 'loading'].forEach(type => {
      Message[type] = (options, args) => {
        if (isObject(options)) {
          return Message(Object.assign(Object.assign({}, options), {
            type
          }));
        }

        return Message(Object.assign({
          type,
          message: options
        }, args));
      };
    });

    Message.closeAll = () => {
      let allEls = $el('sp-message');
      [...allEls].forEach(el => {
        el['attr-visible'] = false;
      });
    };
    new MessageBase();

    const modaTypeslProps = () => ({
      title: String,
      closable: Boolean,
      appendbody: Boolean,
      visible: Boolean,
      class: String || Array,
      classname: String || Array,
      center: Boolean,
      modal: Boolean,
      canceltext: String,
      oktext: String,
      footer: String || Boolean
    }); // 如果需要在一个 Dialog 内部嵌套另一个 Dialog，需要使用 append-to-body 属性。


    const modalProps = {
      title: '提示',
      closable: 'true',
      appendbody: 'false',
      visible: 'false',
      class: '',
      classname: '',
      center: 'false',
      modal: 'true',
      canceltext: '取消',
      oktext: '确认',
      footer: 'true',
      setslotstyle: ''
    };

    // 现在还没办法做到改变外部依赖的数据
    // 打算通过原型注入api e.target
    // 已经实现了多个弹窗叠加功能 
    // 2021-10-7 已完成基本的功能
    // 下一步开始优化代码、单元测试、md文档、动态attr兼容 

    const spButtonCss = `
  .sp-modal-footer{
    box-sizing: border-box;
    display: flex;
    width: 100%;
    justify-content: flex-end;
    align-items: center;
  }
  `;
    const keys$5 = Object.keys(modaTypeslProps());

    const cancelClick = function () {
      this.onClose && this.onClose();
    };

    class Modal {
      constructor() {
        this.initView = function (context) {
          {
            setIndex();
          }
          let content = createEl('main'),
              headerL = createEl('span'),
              headerR = createEl('span'),
              header = createEl('header'),
              template = createEl('template'),
              mock = createEl('div'),
              footer = createEl('footer'),
              footerCancel = createEl('sp-button'),
              footerOk = createEl('sp-button');
          let nodes = Array.from(this.children);
          let slots = ['footer', 'header', 'content'];
          let slotObj = nodes.reduce((obj, i) => {
            let slot = i.getAttribute('slot');
            if (slots.includes(slot)) obj[slot] = slot;
            return obj;
          }, Object.create(null));
          this.zIndex = getIndex();
          this.className = 'sp-modal' + ' sp-modal' + (getIndex() - 2000) + ' ' + this.attrs.class;
          content.className = 'sp-modal-content';
          headerR.className = this.attrs.closable == 'false' ? '' : 'sp-icon sp-icon-close';
          mock.className = 'sp-modal-mock sp-modal-mock-' + getIndex();
          header.className = 'sp-modal-header';
          footer.className = 'sp-modal-footer-active';
          headerL.innerHTML = this.attrs.title;
          footerCancel.innerHTML = this.attrs.canceltext;
          footerOk.innerHTML = this.attrs.oktext;
          header.setAttribute('slot', 'header');
          footer.setAttribute('slot', 'footer');
          header.appendChild(headerL);
          header.appendChild(headerR);
          footer.appendChild(footerCancel);
          footer.appendChild(footerOk);
          footerCancel.onclick = cancelClick.bind(this);

          footerOk.onclick = _ => {
            var _a, _b;

            (_a = this === null || this === void 0 ? void 0 : this.onOk) === null || _a === void 0 ? void 0 : _a.call(this, ((_b = this === null || this === void 0 ? void 0 : this.onOk) === null || _b === void 0 ? void 0 : _b.length) > 0 ? _ : null);
          };

          template.innerHTML = `
        <style>${spButtonCss}${this.attrs.setslotstyle}</style>
        <slot name="header"></slot> 
        <slot name="content">按照格式书写</slot>
        <slot name="footer" class="sp-modal-footer"></slot>
        `;
          setStyle(this, {
            zIndex: String(getIndex()),
            marginTop: this.attrs.center == 'false' ? '15vh' : 'auto',
            display: 'none'
          });
          setStyle(mock, {
            zIndex: String(getIndex() - 1),
            display: 'none'
          });
          listener(headerR, 'click', cancelClick.bind(this));
          !(slotObj === null || slotObj === void 0 ? void 0 : slotObj.header) && this.insertBefore(header, this.firstChild);
          this.attrs.footer !== 'null' && !Reflect.has(slotObj, 'footer') && this.appendChild(footer);
          this.shadowRoot.appendChild(template.content.cloneNode(true));

          if (this.attrs.modal !== 'false') {
            document.body.appendChild(mock);
            mock.onclick = cancelClick.bind(this);
          }

          if (this.attrs.visible == 'true') {
            setStyle(this, {
              display: 'block'
            });
            setStyle(mock, {
              display: 'block'
            });
            context.commonClass(this, 'add', 'enter');
            sto(() => {
              context.commonClass(this, 'remove', 'enter');
            }, 290);
          }

          return {
            header,
            headerL,
            headerR,
            mock
          };
        };

        let self = this;
        defineEl({
          tag: 'sp-modal',
          observedAttributes: keys$5,
          shadow: 'open',

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, modalProps), this.attrs);

            if (this.attrs.appendbody == 'true') {
              this.remove();
              this['attr-appendbody'] = 'false';
              document.body.appendChild(this);
            } else {
              sto(() => {
                this.useAllEls = self.initView.call(this, self);
                self.defineReactive(keys$5, this);
              }); // 初始化视图
            }
          },

          attributeChangedCallback(...args) {
            let [key, _, newval] = args;
            runIFELSE.call(this, new Set([[key == 'visible', () => {
              newval && setIndex();
              if (this.useAllEls) self._fadeami(newval, this);
            }], [key == 'center', () => {
              setStyle(this, {
                marginTop: newval == 'false' ? '15vh' : 'auto'
              });
            }]]));
          }

        });
      }

      defineReactive(keys, el) {
        keys.map(i => {
          Object.defineProperty(el, i, {
            enumerable: false,

            get() {
              return this['_' + i];
            },

            set(v) {
              this.setAttribute(i, v);
              return this['_' + i] = v;
            }

          });
        });
      }

      commonClass(target, type, base) {
        var _a;

        target.classList[type]('sp-modal-' + base + '-active');
        (_a = target.useAllEls) === null || _a === void 0 ? void 0 : _a.mock.classList[type]('sp-modal-mock-' + base + '-active');
      }

      _fadeami(newkey, target) {
        var _a;

        if (newkey == 'true') {
          setStyle(target, {
            display: 'block',
            zIndex: String(getIndex() + 1)
          });
          setStyle((_a = target.useAllEls) === null || _a === void 0 ? void 0 : _a.mock, {
            display: 'block',
            zIndex: String(getIndex())
          });
          this.commonClass(target, 'add', 'enter');
          sto(() => {
            this.commonClass(target, 'remove', 'enter');
          }, 290);
        } else {
          this.commonClass(target, 'add', 'leave');
          sto(() => {
            var _a;

            setStyle(target, {
              display: 'none'
            });
            setStyle((_a = target.useAllEls) === null || _a === void 0 ? void 0 : _a.mock, {
              display: 'none'
            });
            this.commonClass(target, 'remove', 'leave');
          }, 290);
        }
      }

      static config(params) {
        let _p = Object.assign(Object.assign({}, modalProps), params);

        let dialog = createEl('sp-modal');
        let content;
        let footerhtml;

        if ('bodyhtml' in _p) {
          content = createEl('div');
          content.setAttribute('slot', 'content');

          if (typeof _p.bodyhtml == 'string') {
            content.innerHTML = _p.bodyhtml;
          } else {
            throw Error('请传入相应类型');
          }

          dialog.appendChild(content);
        }

        if ('footerhtml' in _p) {
          footerhtml = createEl('div');
          footerhtml.setAttribute('slot', 'footer');

          if (typeof _p.footerhtml == 'string') {
            footerhtml.innerHTML = _p.footerhtml;
          } else {
            throw Error('请传入相应类型');
          }

          dialog.appendChild(footerhtml);
        }

        keys$5.map(k => {
          if (Reflect.has(_p, k)) {
            // @ts-ignore
            dialog.setAttribute(k, _p[k]);
          }
        });

        dialog.onOk = (_p === null || _p === void 0 ? void 0 : _p.onOk) || (() => {
          dialog['attr-visible'] = false;
        });

        dialog.onClose = (_p === null || _p === void 0 ? void 0 : _p.onClose) || (() => {
          dialog['attr-visible'] = false;
        });

        document.body.appendChild(dialog);
        return {
          show(v) {
            dialog['attr-visible'] = v;
          },

          setBodyHtml(html) {
            if (typeof html == 'string') {
              content.innerHTML = html;
            }
          },

          setFooterHtml(html) {
            if (typeof html == 'string') {
              footerhtml.innerHTML = html;
            }
          },

          __$: dialog
        };
      }

    } // (window as any).modal = Modal.config({
    new Modal();

    // default
    const switchProps = {
      'disabled': 'false',
      'width': '',
      'classname': '',
      'default-checked': 'false',
      'loading': 'false',
      'size': 'default',
      'active-text': '',
      'inactive-text': '',
      'active-color': '',
      'inactive-color': '',
      'active-icon': '',
      'inactive-icon': '',
      'value': undefined
    }; // onChange 事件

    const keys$4 = Object.keys(switchProps);
    const iconbaseclass = 'sp-switch-icon sp-icon ';

    class Switch {
      constructor() {
        let self = this;
        defineEl({
          tag: 'sp-switch',
          observedAttributes: keys$4,

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, switchProps), this.attrs);
            this.isActive = false;

            this.onclick = _ => {
              var _a, _b;

              (_a = this.onClick) === null || _a === void 0 ? void 0 : _a.call(this, this.isActive, this);
              if (this['attr-disabled'] == 'true') return;
              self.click(this);
              (_b = this.onChange) === null || _b === void 0 ? void 0 : _b.call(this, this.isActive, this);
            };

            Object.defineProperty(this, 'isActive', {
              enumerable: false,

              set(v) {
                var _a, _b;

                setStyle(this, {
                  backgroundColor: !v ? ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a['inactive-color']) || '#dcdfed' : ((_b = this.attrs) === null || _b === void 0 ? void 0 : _b['active-color']) || '#409eff'
                }); // 变更text 文案

                this.textEl && (this.textEl.textContent = !v ? (this === null || this === void 0 ? void 0 : this['attr-inactive-text']) || '' : (this === null || this === void 0 ? void 0 : this['attr-active-text']) || ''); // loading 权重最高 其他icon

                if (this.iconEl && (this === null || this === void 0 ? void 0 : this['attr-loading']) !== 'true') {
                  this.iconEl.set(!this.isActive ? this === null || this === void 0 ? void 0 : this['attr-active-icon'] : this === null || this === void 0 ? void 0 : this['attr-inactive-icon']);
                }

                self.transform({
                  is: v,
                  target: this,
                  width: this.offsetWidth,
                  icon: this.iconEl,
                  text: this.textEl
                });
                this['_isActive'] = v;
              },

              get() {
                return this['_isActive'] || false;
              }

            });
            self.initView(this);
          },

          attributeChangedCallback(...args) {
            let [key, old, newval] = args;
            key == 'size' && this.classList.remove(old);
            self.set({
              attrs: {
                [key]: newval
              },
              target: this,
              icon: this.iconEl,
              text: this.textEl
            });
          }

        });
      }

      transform({
        is,
        target,
        width,
        icon,
        text
      }) {
        let small = target.className.indexOf('small') > -1;
        let left = (!is ? 1 : parseInt(width) - (small ? 12 : 16) - 3) + 'px';
        icon && setStyle(icon, {
          left
        });
        let w = (text === null || text === void 0 ? void 0 : text.offsetWidth) > 0 ? parseInt(width) - text.offsetWidth - 4 : small ? 12 : 16; // display 情況下 ofsetwidth 失效

        text && icon && setStyle(text, {
          transform: `translateX(${is ? 3 + 'px' : w + 'px'})`
        });
      }

      click(root) {
        if (root === null || root === void 0 ? void 0 : root['attr-value']) return; // 使用value 时取消click

        root.isActive = !root.isActive;
      }

      initView(root) {
        var _a;

        let text = createEl('span'),
            icon = createEl('em');
        root.classList.add('sp-switch');
        icon.classList.add('sp-switch-icon');
        text.classList.add('sp-switch-text');

        if (((_a = root.attrs) === null || _a === void 0 ? void 0 : _a['default-checked']) == 'true') {
          root.isActive = true;
        }

        root.appendChild(text);
        root.appendChild(icon);

        icon.set = v => {
          icon.className = iconbaseclass + v;
        };

        this.set({
          attrs: root.attrs,
          target: root,
          text,
          icon
        });
        root.textEl = text;
        root.iconEl = icon;
        !root['attr-width'] && (root['attr-width'] = root.offsetWidth + 22 > 40 ? root.offsetWidth + 22 : root['attr-size'] == 'small' ? 28 : 40);
        sto(() => root.textEl.classList.add('enter')); // 加载完后 添加transition
      }

      // 变更 属性更新
      set({
        attrs,
        target,
        icon,
        text
      }) {
        runIFELSE(new Set([[attrs === null || attrs === void 0 ? void 0 : attrs['classname'], () => {
          let str = 'sp-switch ' + (attrs === null || attrs === void 0 ? void 0 : attrs['classname']) + ' ' + ((target === null || target === void 0 ? void 0 : target['attr-size']) || 'default') + ' ' + ((target === null || target === void 0 ? void 0 : target['attr-disabled']) == 'true' ? 'is-disabled ' : ' ');
          target.className = str;
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs['loading']) && icon, () => {
          let isloading = attrs === null || attrs === void 0 ? void 0 : attrs['loading'];

          if (isloading == 'false') {
            icon.classList.remove('sp-icon-loading');
          } else if (isloading == 'true') {
            icon.set('sp-icon-loading');
          }
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs['active-icon']) && icon, () => {
          if ((attrs === null || attrs === void 0 ? void 0 : attrs['active-icon'].indexOf('sp-icon')) > -1) {
            target.isActive && icon.set(attrs === null || attrs === void 0 ? void 0 : attrs['active-icon']);
          }
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs['inactive-icon']) && icon, () => {
          if ((attrs === null || attrs === void 0 ? void 0 : attrs['inactive-icon'].indexOf('sp-icon')) > -1) {
            !target.isActive && icon.set(attrs === null || attrs === void 0 ? void 0 : attrs['inactive-icon']);
          }
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['size'], () => {
          target.classList.add(attrs === null || attrs === void 0 ? void 0 : attrs['size']);
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['active-text'], () => {
          target.isActive && text && (text.textContent = attrs === null || attrs === void 0 ? void 0 : attrs['active-text']);
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['inactive-text'], () => {
          !target.isActive && text && (text.textContent = attrs === null || attrs === void 0 ? void 0 : attrs['inactive-text']);
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['active-color'], () => {
          target.isActive && setStyle(target, {
            backgroundColor: attrs === null || attrs === void 0 ? void 0 : attrs['active-color']
          });
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['inactive-color'], () => {
          !target.isActive && setStyle(target, {
            backgroundColor: attrs === null || attrs === void 0 ? void 0 : attrs['inactive-color']
          });
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['disabled'], () => {
          let disabled = attrs === null || attrs === void 0 ? void 0 : attrs['disabled'];
          let type = disabled == 'true' ? 'add' : disabled == 'false' ? 'remove' : 0;
          type && target.classList[type]('is-disabled');
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['width'], () => {
          let is = target.isActive;
          let width = (parseInt(attrs === null || attrs === void 0 ? void 0 : attrs['width']) || 24) + 'px';
          setStyle(target, {
            width
          });
          this.transform({
            is,
            target,
            width,
            icon,
            text
          });
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['value'], () => {
          let ifs = ['true', '1', true, 1];
          let elses = ['false', '0', false, 0];
          ifs.includes(attrs === null || attrs === void 0 ? void 0 : attrs['value']) && (target.isActive = true);
          elses.includes(attrs === null || attrs === void 0 ? void 0 : attrs['value']) && (target.isActive = false);
        }]]));
      }

    }
    new Switch();

    // default // [默认值] // [是否完成]
    const alertProps = {
      'icon': undefined,
      'classname': undefined,
      'type': 'success',
      'closable': undefined,
      'center': undefined,
      'title': undefined,
      'close-text': undefined,
      'effect': 'light' // ok

    }; // close 事件

    const keys$3 = Object.keys(alertProps);
    const spAlertTitleCss = `.sp-alert-content {
    width: 100%;
  }
  .sp-alert-icon {
    margin-right: 10px;
  }
  .sp-alert-close {
    margin-left: 10px;
    cursor: pointer;
  }
  .sp-alert-close:hover {
    filter: brightness(0.8);
  }
  `;

    class Alert {
      constructor() {
        const context = this;
        defineEl({
          tag: 'sp-alert',
          observedAttributes: keys$3,

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, alertProps), this.attrs);
            context.initView(this);
          },

          attributeChangedCallback(...args) {
            let [key, _, newval] = args;
            context.set({
              attrs: {
                [key]: newval
              },
              target: this,
              iconEl: this.iconEl,
              contentEl: this.contentEl,
              closeEl: this.closeEl
            });
          }

        });
      }

      _setClassName(root) {
        var _a, _b, _c; // 第一次执行的时候使用的应该是 默认的 如果不传值的情况下 --- root.attrs.classname
        // 反之 之后每次修改用到的都是 root['attr-classname'] 这样子的


        let basename = root.tagName.toLocaleLowerCase();
        let classList = [basename, (root === null || root === void 0 ? void 0 : root['attr-classname']) || ((_a = root === null || root === void 0 ? void 0 : root.attrs) === null || _a === void 0 ? void 0 : _a['classname']), basename + '--' + ((root === null || root === void 0 ? void 0 : root['attr-type']) || ((_b = root === null || root === void 0 ? void 0 : root.attrs) === null || _b === void 0 ? void 0 : _b['type'])), (root === null || root === void 0 ? void 0 : root['attr-effect']) || ((_c = root === null || root === void 0 ? void 0 : root.attrs) === null || _c === void 0 ? void 0 : _c['effect'])];
        root.className = classList.join(' ');
      }

      _initTempalte(root) {
        root.attachShadow({
          mode: 'open'
        });
        const template = createEl('template');
        template.innerHTML = `
            <style>${spAlertTitleCss}${root === null || root === void 0 ? void 0 : root['attr-setslotstyle']}</style>
            <slot name="l"></slot>
            <div class="sp-alert-content">
                <slot name="title"></slot>
            </div>
            <slot name="r"></slot>
        `;
        root.shadowRoot.appendChild(template.content.cloneNode(true));
      }

      showContentType(root) {
        let nodes = Array.from(root.children);
        let slots = ['title'];
        let slotObj = nodes.reduce((obj, i) => {
          let slot = i.getAttribute('slot');
          if (slots.includes(slot)) obj[slot] = slot;
          return obj;
        }, Object.create(null));
        return slotObj[slots[0]] || false;
      }

      initView(root) {
        let iconEl = createEl('i'),
            contentEl = createEl('span'),
            closeEl = createEl('span');
        iconEl.basename = 'sp-alert-icon';
        contentEl.basename = 'sp-alert-content';
        closeEl.basename = 'sp-alert-close';
        iconEl.classList.add(iconEl.basename);
        contentEl.classList.add(contentEl.basename);
        closeEl.classList.add(closeEl.basename);

        this._setClassName(root);

        root.iconEl = iconEl;
        root.contentEl = contentEl;
        root.closeEl = closeEl;
        listener(closeEl, 'click', () => __awaiter(this, void 0, void 0, function* () {
          var _a;

          let flag = yield (_a = root.close) === null || _a === void 0 ? void 0 : _a.call(root);
          !flag && root.remove();
        }));
        this.set({
          attrs: root.attrs,
          target: root,
          iconEl,
          contentEl,
          closeEl
        });

        if (this.showContentType(root)) {
          this._initTempalte(root);

          contentEl = '';
          iconEl.setAttribute('slot', 'l');
          closeEl.setAttribute('slot', 'r');
        }

        root.append(iconEl, contentEl, closeEl);
      }

      set({
        attrs,
        target,
        contentEl,
        iconEl,
        closeEl
      }) {
        runIFELSE(new Set([[(attrs === null || attrs === void 0 ? void 0 : attrs.icon) && iconEl, () => {
          iconEl.className = iconEl.basename + ' sp-icon ' + (attrs === null || attrs === void 0 ? void 0 : attrs.icon);
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs.closable) && closeEl, () => {
          let display = attrs.closable == 'true' ? 'block' : attrs.closable == 'false' ? 'none' : '';
          display == 'block' && (closeEl.innerHTML = '');
          display == 'block' && (closeEl.className = closeEl.basename + ' sp-icon sp-icon-close');
          setStyle(closeEl, {
            display
          });
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs['close-text']) && closeEl, () => {
          closeEl.className = closeEl.basename;
          closeEl.innerText = attrs === null || attrs === void 0 ? void 0 : attrs['close-text'];
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs['classname']) || attrs['type'] || (attrs === null || attrs === void 0 ? void 0 : attrs['effect']), () => this._setClassName(target)], [(attrs === null || attrs === void 0 ? void 0 : attrs['center']) && contentEl, () => {
          let textAlign = attrs.center == 'true' ? 'center' : attrs.center == 'false' ? 'left' : '';
          setStyle(contentEl, {
            textAlign
          });
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs['title']) && contentEl, () => {
          contentEl.innerText = attrs.title;
        }]]));
      }

    }
    new Alert();

    // default // [默认值] // [是否完成]
    const loadingProps = {
      'icon': undefined,
      'classname': undefined,
      'background': undefined,
      'fullscreen': undefined,
      'text': '加载中...',
      'target': undefined,
      'status': 'true' // ok

    }; // close 事件

    const keys$2 = Object.keys(loadingProps);

    class Loading {
      constructor() {
        this.initChildrens = (root, callback) => __awaiter(this, void 0, void 0, function* () {
          let iconEl = createEl('i'),
              contentEl = createEl('span'),
              basename = root.tagName.toLocaleLowerCase();
          iconEl.basename = basename + '-icon';
          contentEl.basename = basename + '-content';
          iconEl.classList.add(iconEl.basename, 'sp-icon', 'sp-icon-loading');
          contentEl.classList.add(contentEl.basename);
          root.iconEl = iconEl;
          root.contentEl = contentEl;

          this._setClassName(root);

          yield callback(iconEl, contentEl);
          root.append(iconEl, contentEl);
        });

        const context = this;
        defineEl({
          tag: 'sp-loading',
          observedAttributes: keys$2,

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, loadingProps), this.attrs);
            context.initView(this);
          },

          attributeChangedCallback(...args) {
            let [key, _, newval] = args;
            context.set({
              attrs: {
                [key]: newval
              },
              target: this,
              iconEl: this.iconEl,
              contentEl: this.contentEl
            });
          }

        });
      }

      _setClassName(root) {
        var _a; // 第一次执行的时候使用的应该是 默认的 如果不传值的情况下 --- root.attrs.classname
        // 反之 之后每次修改用到的都是 root['attr-classname'] 这样子的


        let basename = root.tagName.toLocaleLowerCase();
        let classList = [basename, (root === null || root === void 0 ? void 0 : root['attr-classname']) || ((_a = root === null || root === void 0 ? void 0 : root.attrs) === null || _a === void 0 ? void 0 : _a['classname'])];
        root.className = classList.join(' ');
      }

      initView(root) {
        const init = (iconEl, contentEl) => {
          let parent = root.parentElement.style;

          if (root.parentElement && parent.position == '' || parent.position == 'static') {
            root.parentElement.style.position = 'relative';
          }

          this.set({
            attrs: root.attrs,
            target: root,
            iconEl,
            contentEl
          });
        };

        this.initChildrens(root, init);
      }

      set({
        attrs,
        target,
        iconEl,
        contentEl
      }) {
        runIFELSE(new Set([[(attrs === null || attrs === void 0 ? void 0 : attrs['icon']) && iconEl, () => {
          iconEl.className = iconEl.basename + ' sp-icon ' + (attrs === null || attrs === void 0 ? void 0 : attrs['icon']);
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['classname'], () => this._setClassName(target)], [attrs === null || attrs === void 0 ? void 0 : attrs['background'], () => {
          setStyle(target, {
            backgroundColor: attrs === null || attrs === void 0 ? void 0 : attrs['background']
          });
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['fullscreen'], () => {
          if (target === null || target === void 0 ? void 0 : target['target']) return;
          let nesetparent = target.parentElement;
          let istrue = (attrs === null || attrs === void 0 ? void 0 : attrs['fullscreen']) == 'true' && 'true';
          let isfalse = (attrs === null || attrs === void 0 ? void 0 : attrs['fullscreen']) == 'false' && 'false';

          if (istrue || target.isfullscreen && isfalse) {
            target === null || target === void 0 ? void 0 : target.remove();
            iconEl === null || iconEl === void 0 ? void 0 : iconEl.remove();
            contentEl === null || contentEl === void 0 ? void 0 : contentEl.remove();
          }

          if (target.isfullscreen && isfalse) {
            target.isfullscreen = false;
            target.parentEl.append(target);
            return;
          }

          if (istrue) {
            target['attr-fullscreen'] = '';
            target.isfullscreen = true;
            target.parentEl = nesetparent;
            document.body.appendChild(target);
          }
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs['text']) && contentEl, () => {
          contentEl.textContent = attrs === null || attrs === void 0 ? void 0 : attrs['text'];
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['target'], () => {
          let el = $el(attrs === null || attrs === void 0 ? void 0 : attrs['target']);
          target['attr-target'] = '';
          target._target = attrs === null || attrs === void 0 ? void 0 : attrs['target'];
          el = el.length && el.length > 0 ? el[0] : el;
          if (!el) throw Error('target nothingness');
          target.remove();
          iconEl.remove();
          contentEl.remove();
          el.appendChild(target);
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['status'], () => {
          if ((attrs === null || attrs === void 0 ? void 0 : attrs['status']) == 'true') {
            target.classList.remove('sp-loading-fade-leave');
            setStyle(target, {
              display: 'flex',
              opacity: '0'
            });
            sto(() => target.classList.add('sp-loading-fade-enter'));
            return;
          }

          if ((attrs === null || attrs === void 0 ? void 0 : attrs['status']) == 'false') {
            target.classList.remove('sp-loading-fade-enter');
            target.classList.add('sp-loading-fade-leave');
            sto(() => setStyle(target, {
              display: 'none'
            }), 190);
          }
        }]]));
      }

      static config(params) {
        const target = createEl('sp-loading');

        for (let k in params) {
          target['attr-' + k] = params[k];
        }

        return {
          close() {
            target['attr-status'] = 'false';
          }

        };
      }

    }
    new Loading();

    // default
    const notifyProps = {
      visible: false,
      type: undefined,
      message: undefined,
      duration: 4500,
      showclose: 'true',
      offset: 20,
      beforeClose: () => {},
      style: undefined,
      title: '',
      classname: undefined,
      position: 'top-right' //  | 'top-left' | 'bottom-right' | 'bottom-left'

    }; // onChange 事件

    const keys$1 = Object.keys(notifyProps);

    class NotifyBase {
      constructor() {
        this.initChildrens = (root, callback) => __awaiter(this, void 0, void 0, function* () {
          var _a, _b;

          let iconEl = createEl('i'),
              contentEl = createEl('div'),
              titleEl = createEl('span'),
              pEl = createEl('p'),
              closeEl = createEl('i'),
              basename = root.tagName.toLocaleLowerCase();

          this._setClassName(root);

          root.id = 'sp-notify__' + getIndex();
          iconEl.basename = basename + '-icon';
          contentEl.basename = basename + '-content';
          closeEl.basename = basename + '-close';
          iconEl.classList.add(iconEl.basename, 'sp-icon', 'sp-icon-' + (root === null || root === void 0 ? void 0 : root['attr-type']) || ((_a = root === null || root === void 0 ? void 0 : root.attrs) === null || _a === void 0 ? void 0 : _a['type']));
          contentEl.classList.add(contentEl.basename);
          closeEl.classList.add(closeEl.basename, 'sp-icon', 'sp-icon-close');
          titleEl.innerText = root.attrs.title;
          pEl.innerText = ((_b = root.attrs) === null || _b === void 0 ? void 0 : _b.message) || '';
          root.iconEl = iconEl;
          root.titleEl = titleEl;
          root.pEl = pEl;
          root.attrs.showclose !== 'true' && (closeEl = '');
          yield callback({
            iconEl,
            contentEl,
            closeEl
          });
          contentEl.append(titleEl, pEl);
          root.append(iconEl, contentEl, closeEl);
        });

        this.setup = function () {
          let allEls = $el('sp-notify');
          let propsOffset = parseInt(this.attrs.offset) || 20;
          let top = [...allEls].reduce((total, el) => {
            if (el['attr-position'].indexOf(this['attr-position']) > -1) {
              el['attr-visible'] == 'true' && (total += el.offsetHeight + propsOffset);
            }

            return total;
          }, propsOffset);
          this['attr-visible'] = 'true';
          setStyle(this, {
            [this['attr-position'].indexOf('bottom') > -1 ? 'bottom' : 'top']: top + 'px',
            zIndex: getIndex() + ''
          });
        };

        const context = this;
        defineEl({
          tag: 'sp-notify',
          observedAttributes: keys$1,

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, notifyProps), this.attrs);

            this.close = () => {
              this['attr-visible'] = false;
            };

            sto(() => {
              context.initView(this);
            });
            this.setup = context.setup.bind(this);
          },

          attributeChangedCallback(...args) {
            var _a;

            let [key, _, newval] = args;
            let elAlls = Array.from($el('sp-notify'));

            if (key == 'visible') {
              let offsetHeight = this.offsetHeight;
              newval && setIndex();

              if (newval == 'false') {
                this.classList.add('sp-notify-fade-leave-' + this['attr-position']);
                setStyle(this, {
                  opacity: '0',
                  zIndex: '0'
                });

                let _index = elAlls.findIndex(i => i.id == this.id);

                this.beforeClose && this.beforeClose();
                elAlls.forEach((element, i) => {
                  if (i >= _index && element['attr-position'].indexOf(this['attr-position']) > -1) {
                    let dir = this['attr-position'].indexOf('bottom') > -1 ? 'bottom' : 'top';
                    let px = parseInt(element.style[dir], 10) - offsetHeight - 20 + 'px';
                    setStyle(element, {
                      [dir]: px
                    });
                  }
                });
                (_a = this.beforeDistroy) === null || _a === void 0 ? void 0 : _a.call(this);
                sto(() => this.remove(), 290);
              } else {
                this.classList.add('sp-notify-fade-enter-' + this['attr-position'] + '');
                sto(() => this.classList.add('sp-notify-fade-enter-' + this['attr-position'] + '-active'));
              }
            }
          }

        });
      }

      _setClassName(root) {
        var _a, _b, _c;

        let basename = root.tagName.toLocaleLowerCase();
        let classList = [root.className, basename, (root === null || root === void 0 ? void 0 : root['attr-classname']) || ((_a = root === null || root === void 0 ? void 0 : root.attrs) === null || _a === void 0 ? void 0 : _a['classname']), (root === null || root === void 0 ? void 0 : root['attr-position']) || ((_b = root === null || root === void 0 ? void 0 : root.attrs) === null || _b === void 0 ? void 0 : _b['position']), basename + '--' + (root === null || root === void 0 ? void 0 : root['attr-type']) || ((_c = root === null || root === void 0 ? void 0 : root.attrs) === null || _c === void 0 ? void 0 : _c['type'])];
        root.className = classList.join(' ');
      }

      initView(root) {
        let t = 0;

        const init = ({
          closeEl
        }) => {
          if (+root.attrs.duration > 0) {
            t = sto(() => {
              root['attr-visible'] = false;
            }, +root.attrs.duration);
          }

          if (closeEl) {
            closeEl.onclick = () => {
              t > 0 && clearTimeout(t);
              root['attr-visible'] = false;
            };
          }
        };

        this.initChildrens(root, init);
      }

    }

    function Notify(params) {
      let props = Object.assign(Object.assign({}, notifyProps), params);
      delete props.visible;
      let t = createEl('sp-notify');
      runIFELSE(new Set([[has(props, 'beforeClose'), () => {
        t.beforeClose = props.beforeClose;
        delete props.beforeClose;
      }], [has(params, 'style'), () => {
        setStyle(t, params.style);
        delete props.style;
      }], [has(params, 'classname'), () => {
        t.classList.add(params.classname);
        delete params.classname;
      }]]));

      for (let k in props) {
        let v = props[k];
        if (v == undefined) continue;
        t[`attr-${k}`] = v + '';
      }

      document.body.appendChild(t);
      sto(t.setup);
      let p = new Promise(r => {
        t.beforeDistroy = () => r(t);
      });
      return Object.assign(p, t);
    }

    ['info', 'success', 'error', 'warning'].forEach(type => {
      Notify[type] = (options, args) => {
        if (isObject(options)) {
          return Notify(Object.assign(Object.assign({}, options), {
            type
          }));
        }

        return Notify(Object.assign({
          type,
          message: options
        }, args));
      };
    });

    Notify.closeAll = () => {
      let allEls = $el('sp-notify');
      [...allEls].forEach(el => {
        el['attr-visible'] = false;
      });
    };
    new NotifyBase();

    const drawerProps = {
      'append-to-body': 'true',
      'mask-closable': 'true',
      keyboard: 'true',
      visible: undefined,
      classname: '',
      placement: 'right',
      closable: 'true',
      closeicon: undefined,
      mask: 'true',
      fullscreen: 'true',
      width: undefined
    };

    class SlotBase {
      constructor(props) {
        this.$$style = props.$$style || '';
      }

      _setClassName(root) {
        var _a, _b, _c;

        let basename = root.tagName.toLocaleLowerCase();
        root.$$placement = (root === null || root === void 0 ? void 0 : root['attr-placement']) || ((_a = root === null || root === void 0 ? void 0 : root.attrs) === null || _a === void 0 ? void 0 : _a['placement']);
        let classList = [basename, (root === null || root === void 0 ? void 0 : root['attr-classname']) || ((_b = root === null || root === void 0 ? void 0 : root.attrs) === null || _b === void 0 ? void 0 : _b['classname']), '_-_' + root.$$placement, // (root?.['append-to-body'] || root?.attrs?.['append-to-body']) == 'true' ? 'is-fixed' : ''
        ((root === null || root === void 0 ? void 0 : root.fullscreen) || ((_c = root === null || root === void 0 ? void 0 : root.attrs) === null || _c === void 0 ? void 0 : _c.fullscreen)) == 'true' ? 'is-fixed' : ''];
        root.className = classList.join(' ');
      }

      _template(root) {
        return `
        <style>${this.$$style}${root.attrs.setslotstyle}</style>
        <slot name="header"></slot> 
        <slot name="content"></slot>
        `;
      }

      _showContentType(root, slots) {
        let nodes = Array.from(root.children);
        let slotObj = nodes.reduce((obj, i) => {
          let slot = i.getAttribute('slot');
          if (slots.includes(slot)) obj[slot] = slot;
          return obj;
        }, Object.create(null));
        return slotObj[slots[0]] || false;
      }

    }

    const keys = Object.keys(drawerProps);
    const $$style = ``;

    class Drawer extends SlotBase {
      constructor() {
        super({
          $$style
        });
        const context = this;
        defineEl({
          tag: 'sp-drawer',
          shadow: 'open',
          observedAttributes: keys,

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, drawerProps), this.attrs); // if (this.attrs['append-to-body'] == 'true') {
            //     this.isbody = true
            //     // this.remove();
            //     this['attr-append-to-body'] = 'false' // 重新走下面
            //     context._setClassName(this)
            //     // document.body.append(this)
            //     // return;
            // }

            if (this.attrs.fullscreen == 'true') {
              this.isbody = true;

              context._setClassName(this);
            }

            sto(() => {
              context.initView(this);
            }); // 初始化视图
          },

          attributeChangedCallback(...args) {
            let [key, _, newval] = args;
            context.set({
              attrs: {
                [key]: newval
              },
              target: this,
              mask: this === null || this === void 0 ? void 0 : this.maskEl,
              header: this === null || this === void 0 ? void 0 : this.headerEl
            });
          }

        });
      } // protected beforeAppend(...args: any) {
      //     let { title, attrs, close } = args;
      //     runIFELSE(new Set([
      //         [!attrs?.['title'], () => {
      //             title = ''
      //         }],
      //         [!attrs?.['closable'], () => {
      //             close = ''
      //         }]
      //     ]))
      // }


      initView(root) {
        var _a, _b, _c;

        let header = createEl('header'),
            title = createEl('span'),
            close = createEl('i'),
            mask = createEl('div'),
            template = createEl('template'),
            slotObj = this._showContentType(root, ['header']);

        mask.className = 'sp-drawer-mask __' + getIndex();
        template.innerHTML = this._template(root);

        this._setClassName(root);

        header.setAttribute('slot', 'header');
        header.append(title, close);
        listener(close, 'click', () => root === null || root === void 0 ? void 0 : root.onClose());
        ((_a = root.attrs) === null || _a === void 0 ? void 0 : _a['keyboard']) == 'true' && listener(document.body, 'keydown', e => {
          if (e.which === 27 && root['attr-visible'] == 'true') {
            root === null || root === void 0 ? void 0 : root.onClose();
          }
        });
        ((_b = root.attrs) === null || _b === void 0 ? void 0 : _b['mask']) == 'false' && (mask = '');
        ((_c = root.attrs) === null || _c === void 0 ? void 0 : _c['mask-closable']) == 'true' && mask && listener(mask, 'click', () => root === null || root === void 0 ? void 0 : root.onClose());
        root.headerEl = header;
        !slotObj.header && root.insertBefore(header, root.firstChild);
        root.shadowRoot.appendChild(template.content.cloneNode(true));
        this.set({
          title,
          attrs: root.attrs,
          close,
          target: root,
          mask,
          header
        });
        root.maskEl = mask;
      }

      set(args) {
        let {
          title,
          attrs,
          close,
          target,
          mask
        } = args;
        runIFELSE(new Set([[(attrs === null || attrs === void 0 ? void 0 : attrs['title']) && title, () => {
          title.innerText = attrs['title'];
        }], [(attrs === null || attrs === void 0 ? void 0 : attrs['closable']) && close, () => {
          if ((attrs === null || attrs === void 0 ? void 0 : attrs['closable']) == 'true') {
            close.className = 'sp-icon ' + ((attrs === null || attrs === void 0 ? void 0 : attrs['closeicon']) ? attrs === null || attrs === void 0 ? void 0 : attrs['closeicon'] : 'sp-icon-close');
          } else {
            setStyle(close, {
              display: 'none'
            });
          }
        }], [attrs === null || attrs === void 0 ? void 0 : attrs['classname'], () => this._setClassName(target)], [attrs === null || attrs === void 0 ? void 0 : attrs['visible'], () => {
          let width = target['attr-width'];

          if ((attrs === null || attrs === void 0 ? void 0 : attrs['visible']) == 'true') {
            target.classList.add('_-_' + (target === null || target === void 0 ? void 0 : target.$$placement));
            mask === null || mask === void 0 ? void 0 : mask.classList.add('block');
            sto(() => {
              width && setStyle(target, {
                width
              });
              target.classList.add('_-_' + (target === null || target === void 0 ? void 0 : target.$$placement) + '-open');
              mask === null || mask === void 0 ? void 0 : mask.classList.add('open');
            });
            {
              setIndex();
              setStyle(mask, {
                zIndex: getIndex() + ''
              });
              setStyle(target, {
                zIndex: getIndex() + 1 + ''
              });
            }
            return;
          }

          if ((attrs === null || attrs === void 0 ? void 0 : attrs['visible']) == 'false') {
            target === null || target === void 0 ? void 0 : target.classList.remove('_-_' + (target === null || target === void 0 ? void 0 : target.$$placement) + '-open');
            mask === null || mask === void 0 ? void 0 : mask.classList.remove('open');
            sto(() => {
              mask === null || mask === void 0 ? void 0 : mask.classList.remove('block');
            }, 290);
          }
        }], [attrs === null || attrs === void 0 ? void 0 : attrs.fullscreen, () => {
          if (!mask) return;

          if (target.isbody) {
            document.body.append(mask);
            return;
          }

          let nesetparent = target.parentElement;
          nesetparent.append(mask);
          setStyle(nesetparent, {
            position: 'relative'
          });
        }]]));
      }

    }
    new Drawer();

    const timelineProps = {
      mode: 'left',
      pending: 'false'
    };
    const timeItemlineProps = {
      color: undefined,
      position: 'left',
      label: undefined,
      icon: undefined
    };

    class TimeLine {
      constructor() {
        const context = this;
        defineEl({
          tag: 'sp-timeline',
          observedAttributes: ['pending', 'mode'],

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, timelineProps), this.attrs);
            context.initView(this);
          },

          attributeChangedCallback(...args) {
            let [key, _, newval] = args;
            context.set({
              attrs: {
                [key]: newval
              },
              root: this
            });
          }

        });
      }

      initView(root) {
        let islabel = false;
        let childrens = Array.from(root.children).filter(el => {
          el.getAttribute('label') && (islabel = true);
          return el.tagName == 'SP-TIMELINE-ITEM';
        });
        console.log(childrens, islabel);
        root.className = 'sp-timeline' + (islabel ? ' sp-timeline-label' : '');
        root.islabel = islabel;
        this.set({
          root,
          attrs: root.attrs
        });
      }

      set({
        root,
        attrs
      }) {
        runIFELSE(new Set([[attrs['mode'], () => {
          if (root.islabel) {
            if (attrs['mode'] == 'right') {
              root.classList.add('label-reverse');
              return;
            }

            root.classList.remove('label-reverse');
            return;
          }

          if (attrs['mode'] == 'right') {
            root.classList.add('is-reverse');
            return;
          }

          root.classList.remove('is-reverse');
        }]]));
      }

    }

    new TimeLine();

    class TimeLineItem {
      constructor() {
        const context = this;
        defineEl({
          tag: 'sp-timeline-item',
          observedAttributes: Object.keys(timeItemlineProps),

          connectedCallback() {
            this.attrs = getProps(this);
            this.attrs = Object.assign(Object.assign({}, timeItemlineProps), this.attrs);
            context.initView(this);
          },

          attributeChangedCallback(...args) {
            let [key, _, newval] = args;
            context.set({
              attrs: {
                [key]: newval
              },
              root: this
            });
          }

        });
      }

      initView(root) {
        let icon = createEl('i'),
            line = createEl('span');
        icon.className = 'sp-timeline-item-icon';
        line.className = 'sp-timeline-item-line';
        root.className = 'sp-timeline-item';
        root.append(icon, line);
        root.iconEl = icon;
        root.lineEl = line;
        this.set({
          root,
          attrs: root.attrs
        });
      }

      set({
        root,
        attrs
      }) {
        runIFELSE(new Set([[attrs['color'] && (root === null || root === void 0 ? void 0 : root.iconEl), () => {
          setStyle(root.iconEl, {
            borderColor: attrs['color']
          });
        }], [attrs['icon'] && (root === null || root === void 0 ? void 0 : root.iconEl), () => {
          root.iconEl.className = 'sp-icon ' + attrs['icon'];
        }], [attrs['label'], () => {
          var _a;

          if (root === null || root === void 0 ? void 0 : root.labelEl) {
            root.labelEl.innerText = attrs['label'];
            return;
          }

          let label = createEl('span');
          label.className = 'sp-timeline-item-label';
          root.className = 'sp-timeline-item label';
          label.innerText = attrs['label'];
          root.insertBefore(label, root.firstChild);
          (_a = root.parentElement) === null || _a === void 0 ? void 0 : _a.classList.add('sp-timeline-label');
          root.labelEl = label;
        }], [attrs['position'], () => {
          if (attrs['position'] == 'right') {
            root.classList.add('reverse');
            return;
          }

          if (root.labelEl && root['attr-position'] == 'left') {
            setStyle(root, {
              paddingLeft: 'calc(50% + 25px)',
              textAlign: 'left',
              paddingRight: 'inherit'
            });
            setStyle(root.labelEl, {
              textAlign: 'right',
              left: '-25px'
            });
          }

          root.classList.remove('reverse');
        }]]));
      }

    }

    new TimeLineItem();

    /// 这里引用 和 抛出组件
    const Spui = {
      Modal,
      Message,
      Loading,
      Notify
    };
    getGlobalThis().Spui = Spui;

    exports.Loading = Loading;
    exports.Message = Message;
    exports.Modal = Modal;
    exports.Notify = Notify;
    exports.button = index;
    exports['default'] = Spui;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}));
//# sourceMappingURL=index.js.map
